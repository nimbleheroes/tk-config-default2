# Copyright (c) 2015 Shotgun Software Inc.
#
# CONFIDENTIAL AND PROPRIETARY
#
# This work is provided "AS IS" and subject to the Shotgun Pipeline Toolkit
# Source Code License included in this distribution package. See LICENSE.
# By accessing, using, copying or modifying this work you indicate your
# agreement to the Shotgun Pipeline Toolkit Source Code License. All rights
# not expressly granted therein are reserved by Shotgun Software Inc.

#
# This file is one of the central points in the Shotgun Pipeline Toolkit configuration and
# a counterpart to the folder configuration structure.
#
# The folder structure underneath the project folder is used to create folders on disk -
# templates.yml (this file) refers to those folders. Therefore, the two files need to be
# in sync. This file contains an overview of all locations that are used by Sgtk.
#
# Whenever an app or an engine refers to a location on disk, it is using an entry defined in
# this file. For more information, see the Shotgun Pipeline Toolkit Documentation.



#
# The keys section contains the definitions for all the different keys that are being
# used by Sgtk. A key is a magic token that is replaced by a value at runtime, for example
# {Shot}. The section below tells Sgtk which data types and formats to expect for each key.
#
keys:
    Sequence:
        type: str
    Shot:
        type: str
    Step:
        type: str
    sg_asset_type:
        type: str
    Asset:
        type: str
    name:
        type: str
        filter_by: alphanumeric
    iteration:
        type: int
    version:
        type: int
        format_spec: "03"
    version_four:
       type: int
       format_spec: "04"
       alias: version
    timestamp:
        type: str
    width:
        type: int
    height:
        type: int
    segment_name:
        type: str

    # Represents the optional output name for frames written by the Shotgun Write Node
    nuke.output:
        alias: output
        type: str
        filter_by: alphanumeric

    SEQ:
        type: sequence
        format_spec: "04"

    eye:
        type: str

    # these are used by the Hiero exporter and pipeline
    YYYY:
        type: int
        format_spec: "04"
    MM:
        type: int
        format_spec: "02"
    DD:
        type: int
        format_spec: "02"
        alias: DD
    project:
        type: str
    track:
        type: str
    tk_version:
        type: str

    # Maya supports two extension types.
    maya_extension:
        type: str
        choices:
            ma: Maya Ascii (.ma)
            mb: Maya Binary (.mb)
        default: ma
        alias: extension

#
# The paths section contains all the the key locations where files are to be stored
# by Sgtk Apps. Each path is made up of several keys (like {version} or {shot}) and
# these are defined in the keys section above.
#
# Apps use these paths as part of their configuration to define where on disk
# different files should go.
#

paths:

    # Common  path definitions to use as shorthand in order to avoid repetitive and verbose
    # templates. This also makes it easy to change any of the common root paths and have the
    # changes apply to all templates that use them.
    #
    # These don't require the standard formatting (with definition and root_name) because they
    # will be set within each template that uses the alias.
    asset_root: asset/{Asset}
    sequence_root: shots/{Sequence}
    shot_root: shots/{Sequence}/{Shot}

    shot_step: shots/{Sequence}/{Shot}/{Step}
    asset_step: asset/{Asset}/{Step}


    ##########################################################################################
    # Project level paths
    #

    #
    # OCIO
    #

    ocio_config_path:
        definition: 'pipe/ocio'

    #
    # Nuke
    #

    nuke_tools_path:
        definition: 'pipe/nuke'

    #
    # Hiero
    #

    # The location of WIP files
    hiero_project_work:
        definition: 'edit/conform/work/hiero/{name}_v{version}.hrox'
    hiero_project_work_area:
        definition: 'edit/conform/work'
    # The location of backups of WIP files
    hiero_project_snapshot:
        definition: 'edit/conform/work/snapshots/{name}_v{version}_{timestamp}.hrox'
    # The location of published hiero files
    hiero_project_publish:
        definition: 'edit/conform/pub/{name}_v{version}.hrox'
    hiero_project_publish_area:
        definition: 'edit/conform/pub'


    ##########################################################################################
    # Sequence level paths
    #


    ##########################################################################################
    # Shot level paths
    #

    #
    # Photoshop
    #

    # The location of WIP files
    photoshop_shot_work:
        definition: '@shot_step/work/photoshop/{name}.v{version}.psd'
    shot_work_area_photoshop:
        definition: '@shot_step/work/photoshop'
    # The location of backups of WIP files
    photoshop_shot_snapshot:
        definition: '@shot_step/work/photoshop/snapshots/{name}.v{version}.{timestamp}.psd'
    # The location of published files
    shot_publish_area_photoshop:
        definition: '@shot_step/pub/photoshop'
    photoshop_shot_publish:
        definition: '@shot_step/pub/photoshop/{name}.v{version}.psd'

    #
    # Maya
    #

    # define the location of a work area
    shot_work_area_maya:
        definition: '@shot_step/work/maya'
    # define the location of a publish area
    shot_publish_area_maya:
        definition: '@shot_step/pub/maya'
    # The location of WIP files
    maya_shot_work:
        definition: '@shot_step/work/maya/{name}.v{version}.{maya_extension}'
    # The location of backups of WIP files
    maya_shot_snapshot:
        definition: '@shot_step/work/maya/snapshots/{name}.v{version}.{timestamp}.{maya_extension}'
    # The location of published maya files
    maya_shot_publish:
        definition: '@shot_step/pub/maya/{name}.v{version}.{maya_extension}'


    #
    # Nuke
    #

    # The location of WIP script files
    shot_work_area_nuke:
        definition: '@shot_step/work/nuke'
    nuke_shot_work:
        definition: '@shot_step/work/nuke/{name}.v{version}.nk'
    nuke_shot_snapshot:
        definition: '@shot_step/work/nuke/snapshots/{name}.v{version}.{timestamp}.nk'

    # The location of published nuke script files
    shot_publish_area_nuke:
        definition: '@shot_step/pub/nuke'
    nuke_shot_publish:
        definition: '@shot_step/pub/nuke/{name}.v{version}.nk'

    # Write node locations
    # main output
    nuke_shot_main_filename:
        definition: '{Shot}_{Step}_out[-{nuke.output}]_{eye}_v{version}/{Shot}_{Step}_out[-{nuke.output}]_{eye}_v{version}.{SEQ}.exr'
    nuke_shot_main_work:
        definition: '@shot_step/work/images/@nuke_shot_main_filename'
    nuke_shot_main_publish:
        definition: '@shot_root/elem/@nuke_shot_main_filename'
    # precomp output
    nuke_shot_precomp_filename:
        definition: '{Shot}_{Step}_prc[-{nuke.output}]_{eye}_v{version}/{Shot}_{Step}_prc[-{nuke.output}]_{eye}_v{version}.{SEQ}.exr'
    nuke_shot_precomp_work:
        definition: '@shot_step/work/images/@nuke_shot_precomp_filename'
    nuke_shot_precomp_publish:
        definition: '@shot_root/elem/@nuke_shot_precomp_filename'
    # smartvector output
    nuke_shot_smartvector_filename:
        definition: '{Shot}_{Step}_smrt[-{nuke.output}]_{eye}_v{version}/{Shot}_{Step}_smrt[-{nuke.output}]_{eye}_v{version}.{SEQ}.exr'
    nuke_shot_smartvector_work:
        definition: '@shot_step/work/images/@nuke_shot_smartvector_filename'
    nuke_shot_smartvector_publish:
        definition: '@shot_root/elem/@nuke_shot_smartvector_filename'
    # matte output
    nuke_shot_matte_filename:
        definition: '{Shot}_{Step}_matte[-{nuke.output}]_{eye}_v{version}/{Shot}_{Step}_matte[-{nuke.output}]_{eye}_v{version}.{SEQ}.exr'
    nuke_shot_matte_work:
        definition: '@shot_step/work/images/@nuke_shot_matte_filename'
    nuke_shot_matte_publish:
        definition: '@shot_root/elem/@nuke_shot_matte_filename'
    # review output
    nuke_shot_review_filename:
        definition: '{Shot}_{Step}_review[-{nuke.output}]_{eye}_v{version}/{Shot}_{Step}_review[-{nuke.output}]_{eye}_v{version}.{SEQ}.exr'
    nuke_shot_review_work:
        definition: '@shot_step/work/images/@nuke_shot_review_filename'
    nuke_shot_review_publish:
        definition: '@shot_root/elem/@nuke_shot_review_filename'

    # reviewsubmission
    nuke_shot_render_movie:
        definition: '@shot_root/movs/{Shot}_{Step}_review[-{nuke.output}]_{eye}_v{version}.mov'

    #
    # Hiero
    #

    # export of shot asset data from hiero
    hiero_plate_path_filename:
        definition: '{Shot}_conform_{track}_{eye}_v{version}/{Shot}_conform_{track}_{eye}_v{version}.{SEQ}.exr'
    hiero_plate_path:
        definition: '@shot_root/elem/@hiero_plate_path_filename'
    hiero_plate_qt_path:
        definition: '@shot_root/movs/{Shot}_conform_{track}_{eye}_v{version}.mov'
    hiero_audio_path:
        definition: '@shot_root/audio/{Shot}_conform_{track}_v{version}.wav'
    ##########################################################################################
    # Asset pipeline


    #
    # Alembic caches
    #

    asset_alembic_cache:
        definition: '@asset_step/pub/caches/{name}.v{version}.abc'


    #
    # Photoshop
    #

    # The location of WIP files
    photoshop_asset_work:
        definition: '@asset_step/work/photoshop/{name}.v{version}.psd'
    asset_work_area_photoshop:
        definition: '@asset_step/work/photoshop'
    # The location of backups of WIP files
    photoshop_asset_snapshot:
        definition: '@asset_step/work/photoshop/snapshots/{name}.v{version}.{timestamp}.psd'
    # The location of published files
    asset_publish_area_photoshop:
        definition: '@asset_step/pub/photoshop'
    photoshop_asset_publish:
        definition: '@asset_step/pub/photoshop/{name}.v{version}.psd'


    #
    # Maya
    #

    # define the location of a work area
    asset_work_area_maya:
        definition: '@asset_step/work/maya'
    # define the location of a publish area
    asset_publish_area_maya:
        definition: '@asset_step/pub/maya'
    # The location of WIP files
    maya_asset_work:
        definition: '@asset_step/work/maya/{name}.v{version}.{maya_extension}'
    # The location of backups of WIP files
    maya_asset_snapshot:
        definition: '@asset_step/work/maya/snapshots/{name}.v{version}.{timestamp}.{maya_extension}'
    # The location of published maya files
    maya_asset_publish:
        definition: '@asset_step/pub/maya/{name}.v{version}.{maya_extension}'


    #
    # Nuke
    #

    # The location of WIP script files
    asset_work_area_nuke:
        definition: '@asset_step/work/nuke'
    nuke_asset_work:
        definition: '@asset_step/work/nuke/{name}.v{version}.nk'
    nuke_asset_snapshot:
        definition: '@asset_step/work/nuke/snapshots/{name}.v{version}.{timestamp}.nk'

    # The location of published nuke script files
    asset_publish_area_nuke:
        definition: '@asset_step/pub'
    nuke_asset_publish:
        definition: '@asset_step/pub/nuke/{name}.v{version}.nk'

    # Write node locations
    # main output
    nuke_asset_main_filename:
        definition: '{Asset}_{Step}_out[-{nuke.output}]_{eye}_v{version}/{Asset}_{Step}_out[-{nuke.output}]_{eye}_v{version}.{SEQ}.exr'
    nuke_asset_main_work:
        definition: '@asset_step/work/images/@nuke_asset_main_filename'
    nuke_asset_main_publish:
        definition: '@asset_root/elem/@nuke_asset_main_filename'

    # review output
    nuke_asset_render_movie:
        definition: '@asset_step/movs/{Asset}_{Step}_review[-{nuke.output}]_{eye}_v{version}.mov'


#
# The strings section is similar to the paths section - but rather than defining paths
# on disk, it contains a list of strings. Strings are typically used when you want to be
# able to configure the way data is written to shotgun - it may be the name field for a
# review version or the formatting of a publish.
#

strings:

    # when a review Version in Shotgun is created inside of Nuke, this is the
    # name that is being given to it (the code field)
    nuke_shot_version_name: "{Shot}_{name}_{nuke.output}_v{version}.{iteration}"
    nuke_quick_shot_version_name: "{Shot}_{name}_quick_{iteration}"

    nuke_asset_version_name: "{Asset}_{name}_{nuke.output}_v{version}.{iteration}"
    nuke_quick_asset_version_name: "{Asset}_{name}_quick_{iteration}"

    # defines how the {tk_version} token in Hiero gets formatted back to tk.
    hiero_version: "{version}"
